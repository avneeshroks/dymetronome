{"version":3,"sources":["utils/scheduledMetronome.js","utils/baseMetronome.js","metronome/metronome.jsx","App.js","serviceWorker.js","index.js"],"names":["ScheduledMetronome","plan","tickTimeouts","callbackFn","now","this","audioCtx","currentTime","forEach","segment","index","console","log","tempo","ticks","timeoutDuration","i","clickAtTime","x","push","setTimeout","stop","timeOut","clearTimeout","playing","tick","tickVolume","soundHz","window","AudioContext","webkitAudioContext","createOscillator","createGain","type","frequency","value","gain","connect","destination","start","time","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","initAudio","Metronome","props","currentTempo","formatPlan","handleMetronomeStartClick","bind","handleMetronomeStopClick","handleTick","handleStop","map","item","duration","e","metronome","setState","stopM","className","onClick","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fb04c80b.chunk.js","sourcesContent":["import { BaseMetronome } from \"./baseMetronome\";\n\nexport class ScheduledMetronome extends BaseMetronome {\n    constructor(plan) {\n        super();\n        this.plan = plan;\n        this.tickTimeouts = [];\n    }\n\n    start(callbackFn) {\n        super.start();\n\n        let now = this.audioCtx.currentTime;\n\n        this.plan.forEach((segment, index) => {\n            console.log(\n                `scheduling for segment : ${index + 1}. With tempo : ${\n                segment.tempo\n                } and Ticks : ${segment.ticks}.`\n            );\n\n            const timeoutDuration = 60 / segment.tempo;\n\n            // Schedule all the clicks ahead.\n            for (let i = 0; i < segment.ticks; i++) {\n                this.clickAtTime(now);\n                const x = now;\n                this.tickTimeouts.push(setTimeout(() => callbackFn(x, segment.tempo), now * 1000));\n                now += timeoutDuration;\n            }\n        });\n    }\n\n    stopM(callbackFn) {\n        this.stop(callbackFn);\n\n        this.tickTimeouts.forEach((timeOut)=> {\n            clearTimeout(timeOut);\n        });\n\n        this.tickTimeouts = [];\n    }\n}","/*\n * Base metronome, with no timing.\n * More like a \"click on command\" class.\n */\nexport class BaseMetronome {\n    constructor() {\n        this.playing = false;\n\n        this.audioCtx = null;\n        this.tick = null;\n        this.tickVolume = null;\n        this.soundHz = 1000;\n    }\n\n    initAudio() {\n        this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n        this.tick = this.audioCtx.createOscillator();\n        this.tickVolume = this.audioCtx.createGain();\n\n        this.tick.type = \"sine\";\n        this.tick.frequency.value = this.soundHz;\n        this.tickVolume.gain.value = 0;\n\n        this.tick.connect(this.tickVolume);\n        this.tickVolume.connect(this.audioCtx.destination);\n        this.tick.start(0); // No offset, start immediately.\n    }\n\n    click(callbackFn) {\n        const time = this.audioCtx.currentTime;\n        this.clickAtTime(time);\n\n        if (callbackFn) {\n            callbackFn(time);\n        }\n    }\n\n    clickAtTime(time) {\n        // Silence the click.\n        this.tickVolume.gain.cancelScheduledValues(time);\n        this.tickVolume.gain.setValueAtTime(0, time);\n\n        // Audible click sound.\n        this.tickVolume.gain.linearRampToValueAtTime(1, time + 0.001);\n        this.tickVolume.gain.linearRampToValueAtTime(0, time + 0.001 + 0.01);\n    }\n\n    start(callbackFn) {\n        if (this.playing) {\n            this.stop();\n        }\n        this.playing = true;\n        this.initAudio();\n    }\n\n    stop(callbackFn) {\n        this.tick.stop();\n        this.playing = false;\n        this.audioCtx = null;\n        this.tickVolume.gain.value = 0;\n    }\n}\n","import React from 'react';\nimport { ScheduledMetronome } from '../utils/scheduledMetronome';\nimport './metronome.css';\n\nexport class Metronome extends React.Component {\n\n    metronome;\n    currentTempo = null;\n\n    constructor(props) {\n        super(props);\n        this.plan = this.formatPlan(props.plan);\n        this.handleMetronomeStartClick = this.handleMetronomeStartClick.bind(this);\n        this.handleMetronomeStopClick = this.handleMetronomeStopClick.bind(this);\n        this.handleTick = this.handleTick.bind(this);\n        this.handleStop = this.handleStop.bind(this);\n    }\n\n    formatPlan(plan) {\n        plan.map(item => {\n            item[\"ticks\"] = item.tempo * item.duration;\n            return item;\n        });\n        return plan;\n    }\n\n    handleMetronomeStartClick(e){\n        this.metronome = new ScheduledMetronome(this.plan);\n        this.metronome.start(this.handleTick);\n        this.setState({});\n    }\n    \n    handleMetronomeStopClick(e){\n        this.metronome.stopM(this.handleStop);\n        this.metronome = null;\n        this.setState({});\n    }\n\n    handleTick(time, currentTempo) {\n        console.log(`tick @ ${time}`);\n        this.currentTempo = currentTempo;\n        this.setState({});\n    }\n    \n    handleStop(time) {\n        console.log(`Metronome Stopped`);\n    }\n\n    render() {\n        const playing = this.metronome && !!this.metronome.playing;\n        const currentTempo = playing && this.currentTempo ? this.currentTempo : null;\n\n        return (\n            <div className=\"mWrapper\">\n                <div className=\"btnWrapper\">\n                    {\n                        !playing\n                        ? <button\n                            className=\"startBtn\"\n                            onClick={this.handleMetronomeStartClick}\n                        >\n                            <span className=\"btnText\">\n                                Start\n                            </span>\n                        </button>\n                        :<button\n                            className=\"endBtn\"\n                            onClick={this.handleMetronomeStopClick}\n                        >\n                            <span className=\"btnText\">\n                                Stop\n                            </span>\n                        </button>\n                    }\n                </div>\n                <div className=\"playingMsg\">\n                    {\n                        currentTempo\n                        ? <div>\n                            {`Currently playing @ : ${this.currentTempo} Bpm...`}\n                        </div>\n                        : <div>\n                            {`It'll play as per plan selected`}\n                        </div>\n                    }\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport { Metronome } from './metronome/metronome';\n\nfunction App() {\n\n  const plan = [\n    {\n      tempo: 40,\n      duration: 0.1\n    },\n    {\n      tempo: 60,\n      duration: 0.1\n    },\n    {\n      tempo: 80,\n      duration: 0.1\n    },\n    {\n      tempo: 120,\n      duration: 0.2\n    },\n    {\n      tempo: 210,\n      duration: 0.2\n    },\n  ];\n\n  \n  return (\n    <div className=\"App\">\n      <Metronome plan={plan}></Metronome>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}