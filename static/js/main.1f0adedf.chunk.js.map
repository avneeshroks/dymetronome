{"version":3,"sources":["core/inputNumber/inputNumber.jsx","planner/planRow/planRow.jsx","planner/planner.jsx","utils/scheduledMetronome.js","utils/baseMetronome.js","metronome/metronome.jsx","App.js","serviceWorker.js","index.js"],"names":["InputNumber","props","increment","bind","decrement","state","value","min","max","this","setState","className","type","onClick","React","Component","PlanRow","bpmValue","valuetext","handleBpmSliderVauleChange","e","Slider","defaultValue","getAriaValueText","aria-labelledby","valueLabelDisplay","step","marks","onChangeCommitted","Planner","planRows","handleAddRowClicked","push","key","Math","random","Fab","color","aria-label","ScheduledMetronome","plan","tickTimeouts","callbackFn","endCallbackFn","now","audioCtx","currentTime","forEach","segment","index","console","log","tempo","ticks","timeoutDuration","i","clickAtTime","x","setTimeout","stop","timeOut","clearTimeout","playing","tick","tickVolume","soundHz","window","AudioContext","webkitAudioContext","createOscillator","createGain","frequency","gain","connect","destination","start","time","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","initAudio","Metronome","currentTempo","rawPlan","getPlan","formatPlan","handleMetronomeStartClick","handleMetronomeStopClick","handleTick","handleStop","handlePlanSeqEnd","duration","map","item","metronome","stopM","useStyles","makeStyles","root","width","App","classes","useState","setValue","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","label","icon","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1f0adedf.chunk.js","sourcesContent":["import React from 'react';\nimport './inputNumber.css';\n\nexport default class InputNumber extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.increment = this.increment.bind(this);\n        this.decrement = this.decrement.bind(this);\n        this.state = {\n            value : !!this.props.min ? this.props.min : 0\n        };\n    }\n\n    get value() {\n        return this.state.value;\n    }\n\n    increment() {\n        const { max } = this.props;\n\n        if (typeof max === 'number' && this.value >= max) return;\n\n        this.setState({ value: this.value + 1 });\n    }\n\n    decrement() {\n        const { min } = this.props;\n\n        if (typeof min === 'number' && this.value <= min) return;\n\n        this.setState({ value: this.value - 1 });\n    }\n\n    render() {\n        return (\n            <div className=\"input-number\">\n                <button type=\"button\" onClick={this.decrement}>&minus;</button>\n                <span>{this.value}</span>\n                <button type=\"button\" onClick={this.increment}>&#43;</button>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './planRow.css';\nimport Slider from '@material-ui/core/Slider';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport InputNumber from '../../core/inputNumber/inputNumber';\n\n\nexport default class PlanRow extends React.Component {\n\n    bpmValue = 40;\n\n    constructor(props) {\n        super(props);\n        this.valuetext = this.valuetext.bind(this);\n        this.handleBpmSliderVauleChange = this.handleBpmSliderVauleChange.bind(this);\n    }\n\n    valuetext(value) {\n        this.bpmValue = value;\n        return `${value} Bpm`;\n    }\n\n    handleBpmSliderVauleChange(e) {\n        this.setState({});\n    }\n\n    render() {\n        return (\n            <div className=\"plannerRow\">\n                <div className=\"plInputWrapper\">\n                <Slider\n                    defaultValue={40}\n                    getAriaValueText={this.valuetext}\n                    aria-labelledby=\"discrete-slider\"\n                    valueLabelDisplay=\"auto\"\n                    step={1}\n                    marks\n                    min={40}\n                    max={220}\n                    onChangeCommitted={this.handleBpmSliderVauleChange}\n                />\n                </div>\n                <div className=\"plSubRowWarpper\">\n                    <div className=\"subRowItem bpmLabel\">\n                        { `${this.bpmValue} Bpm` }\n                    </div>\n\n                    <div className=\"subRowItem timePicker\"> \n                        <InputNumber min={0} max={10} />\n                    </div>\n\n                    <div className=\"subRowItem delPlanBtn\">\n                        <span>\n                            <DeleteOutlineIcon></DeleteOutlineIcon>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './planner.css';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport PlanRow from './planRow/planRow';\n\n\nexport default class Planner extends React.Component {\n\n    planRows = [];\n\n    constructor(props) {\n        super(props);\n        this.handleAddRowClicked = this.handleAddRowClicked.bind(this);\n        this.planRows.push(<PlanRow key={Math.random()}></PlanRow>);\n    }\n    \n    handleAddRowClicked(e) {\n        this.planRows.push(<PlanRow key={Math.random()}></PlanRow>);\n        this.setState({});\n    }\n\n    render() {\n        return (\n            <div className=\"plannerWrapper\">\n                <div>\n                    { this.planRows }\n                </div>\n                <Fab color=\"primary\" aria-label=\"add\" >\n                    <AddIcon onClick={this.handleAddRowClicked}/>\n                </Fab>\n            </div>\n        )\n    }\n}","import { BaseMetronome } from \"./baseMetronome\";\n\nexport class ScheduledMetronome extends BaseMetronome {\n    constructor(plan) {\n        super();\n        this.plan = plan;\n        this.tickTimeouts = [];\n    }\n\n    start(callbackFn, endCallbackFn) {\n        super.start();\n\n        let now = this.audioCtx.currentTime;\n\n        this.plan.forEach((segment, index) => {\n            console.log(\n                `scheduling for segment : ${index + 1}. With tempo : ${\n                segment.tempo\n                } and Ticks : ${segment.ticks}.`\n            );\n\n            const timeoutDuration = 60 / segment.tempo;\n\n            // Schedule all the clicks ahead.\n            for (let i = 0; i < segment.ticks; i++) {\n                this.clickAtTime(now);\n                const x = now;\n                this.tickTimeouts.push(setTimeout(() => callbackFn(x, segment.tempo), now * 1000));\n                now += timeoutDuration;\n            }\n        });\n\n        console.log(\n            `registering end event.`\n        );\n        this.tickTimeouts.push(setTimeout(() => endCallbackFn(), now * 1000 + 10));\n    }\n\n    stopM(callbackFn) {\n        this.stop(callbackFn);\n\n        this.tickTimeouts.forEach((timeOut)=> {\n            clearTimeout(timeOut);\n        });\n\n        this.tickTimeouts = [];\n    }\n}","/*\n * Base metronome, with no timing.\n * More like a \"click on command\" class.\n */\nexport class BaseMetronome {\n    constructor() {\n        this.playing = false;\n\n        this.audioCtx = null;\n        this.tick = null;\n        this.tickVolume = null;\n        this.soundHz = 1000;\n    }\n\n    initAudio() {\n        this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n        this.tick = this.audioCtx.createOscillator();\n        this.tickVolume = this.audioCtx.createGain();\n\n        this.tick.type = \"sine\";\n        this.tick.frequency.value = this.soundHz;\n        this.tickVolume.gain.value = 0;\n\n        this.tick.connect(this.tickVolume);\n        this.tickVolume.connect(this.audioCtx.destination);\n        this.tick.start(0); // No offset, start immediately.\n    }\n\n    click(callbackFn) {\n        const time = this.audioCtx.currentTime;\n        this.clickAtTime(time);\n\n        if (callbackFn) {\n            callbackFn(time);\n        }\n    }\n\n    clickAtTime(time) {\n        // Silence the click.\n        this.tickVolume.gain.cancelScheduledValues(time);\n        this.tickVolume.gain.setValueAtTime(0, time);\n\n        // Audible click sound.\n        this.tickVolume.gain.linearRampToValueAtTime(1, time + 0.001);\n        this.tickVolume.gain.linearRampToValueAtTime(0, time + 0.001 + 0.01);\n    }\n\n    start(callbackFn) {\n        if (this.playing) {\n            this.stop();\n        }\n        this.playing = true;\n        this.initAudio();\n    }\n\n    stop(callbackFn) {\n        this.tick.stop();\n        this.playing = false;\n        this.audioCtx = null;\n        this.tickVolume.gain.value = 0;\n    }\n}\n","import React from 'react';\nimport { ScheduledMetronome } from '../utils/scheduledMetronome';\nimport './metronome.css';\n\nexport default class Metronome extends React.Component {\n\n    metronome;\n    currentTempo = null;\n\n    constructor(props) {\n        super(props);\n        let rawPlan = this.getPlan();\n        this.plan = this.formatPlan(rawPlan);\n        this.handleMetronomeStartClick = this.handleMetronomeStartClick.bind(this);\n        this.handleMetronomeStopClick = this.handleMetronomeStopClick.bind(this);\n        this.handleTick = this.handleTick.bind(this);\n        this.handleStop = this.handleStop.bind(this);\n        this.handlePlanSeqEnd = this.handlePlanSeqEnd.bind(this);\n    }\n\n    getPlan() {\n        return [\n            {\n                tempo: 40,\n                duration: 0.1\n            },\n            {\n                tempo: 60,\n                duration: 0.1\n            },\n            {\n                tempo: 80,\n                duration: 0.1\n            },\n            {\n                tempo: 120,\n                duration: 0.2\n            },\n            {\n                tempo: 210,\n                duration: 0.2\n            },\n        ];\n    }\n\n    formatPlan(plan) {\n        plan.map(item => {\n            item[\"ticks\"] = item.tempo * item.duration;\n            return item;\n        });\n        return plan;\n    }\n\n    handleMetronomeStartClick(e){\n        this.metronome = new ScheduledMetronome(this.plan);\n        this.metronome.start(this.handleTick, this.handlePlanSeqEnd);\n        this.setState({});\n    }\n    \n    handleMetronomeStopClick(e){\n        this.metronome.stopM(this.handleStop);\n        this.metronome = null;\n        this.setState({});\n    }\n\n    handleTick(time, currentTempo) {\n        console.log(`tick @ ${time}`);\n        this.currentTempo = currentTempo;\n        this.setState({});\n    }\n    \n    handleStop(time) {\n        console.log(`Metronome Stopped`);\n    }\n    \n    handlePlanSeqEnd() {\n        this.metronome = null;\n        this.setState({});\n    }\n\n    render() {\n        const playing = this.metronome && !!this.metronome.playing;\n        const currentTempo = playing && this.currentTempo ? this.currentTempo : null;\n\n        return (\n            <div className=\"mWrapper\">\n                <div className=\"btnWrapper\">\n                    {\n                        !playing\n                        ? <button\n                            className=\"startBtn\"\n                            onClick={this.handleMetronomeStartClick}\n                        >\n                            <span className=\"btnText\">\n                                Start\n                            </span>\n                        </button>\n                        :<button\n                            className=\"endBtn\"\n                            onClick={this.handleMetronomeStopClick}\n                        >\n                            <span className=\"btnText\">\n                                Stop\n                            </span>\n                        </button>\n                    }\n                </div>\n                <div className=\"playingMsg\">\n                    {\n                        currentTempo\n                        ? <div>\n                            {`Currently playing @ : ${this.currentTempo} Bpm...`}\n                        </div>\n                        : <div>\n                            {`It'll play as per plan selected. If not created yet then go to plan...`}\n                        </div>\n                    }\n                </div>\n            </div>\n        )\n    }\n}","import BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport React from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Planner from './planner/planner';\nimport Metronome from './metronome/metronome';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleNavigationChange = (event, newValue) => {\n    setValue(newValue);\n  }\n \n  return (\n    <div className=\"App\">\n      {\n        value === 0 \n        ? <Planner ></Planner>\n        : <Metronome ></Metronome>\n      }\n      <BottomNavigation\n        value={value}\n        onChange={handleNavigationChange.bind(this)}\n        showLabels\n        className={classes.root}\n      >\n        <BottomNavigationAction label=\"Plan\" icon={<ScheduleIcon />} />\n        <BottomNavigationAction label=\"Play\" icon={<PlayCircleOutlineIcon />} />\n      </BottomNavigation>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}