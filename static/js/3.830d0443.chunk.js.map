{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/superPropBase.js","utils/baseMetronome.js","utils/scheduledMetronome.js","metronome/metronome.jsx"],"names":["target","property","receiver","Reflect","get","base","object","Object","prototype","hasOwnProperty","call","getPrototypeOf","desc","getOwnPropertyDescriptor","value","ScheduledMetronome","plan","tickTimeouts","callbackFn","endCallbackFn","now","this","audioCtx","currentTime","forEach","segment","index","console","log","tempo","ticks","timeoutDuration","i","clickAtTime","x","push","setTimeout","stop","timeOut","clearTimeout","playing","tick","tickVolume","soundHz","window","AudioContext","webkitAudioContext","createOscillator","createGain","type","frequency","gain","connect","destination","start","time","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","initAudio","Metronome","props","currentTempo","rawPlan","getPlan","formatPlan","handleMetronomeStartClick","bind","handleMetronomeStopClick","handleTick","handleStop","handlePlanSeqEnd","duration","map","item","e","metronome","setState","stopM","className","onClick","to","React","Component"],"mappings":"mPACe,SAAS,EAAKA,EAAQC,EAAUC,GAiB7C,OAfE,EADqB,qBAAZC,SAA2BA,QAAQC,IACrCD,QAAQC,IAER,SAAcJ,EAAQC,EAAUC,GACrC,IAAIG,ECLK,SAAwBC,EAAQL,GAC7C,MAAQM,OAAOC,UAAUC,eAAeC,KAAKJ,EAAQL,IAEpC,QADfK,EAAS,OAAAK,EAAA,GAAeL,MAI1B,OAAOA,EDDQ,CAAcN,EAAQC,GACjC,GAAKI,EAAL,CACA,IAAIO,EAAOL,OAAOM,yBAAyBR,EAAMJ,GAEjD,OAAIW,EAAKR,IACAQ,EAAKR,IAAIM,KAAKR,GAGhBU,EAAKE,SAIJd,EAAQC,EAAUC,GAAYF,GEdrC,ICFMe,EAAb,kDACI,WAAYC,GAAO,IAAD,8BACd,gBACKA,KAAOA,EACZ,EAAKC,aAAe,GAHN,EADtB,kDAOUC,EAAYC,GAAgB,IAAD,OAC7B,oDAEA,IAAIC,EAAMC,KAAKC,SAASC,YAExBF,KAAKL,KAAKQ,SAAQ,SAACC,EAASC,GACxBC,QAAQC,IAAR,mCACgCF,EAAQ,EADxC,0BAEID,EAAQI,MAFZ,wBAGoBJ,EAAQK,MAH5B,MASA,IAHA,IAAMC,EAAkB,GAAKN,EAAQI,MAPH,WAUzBG,GACL,EAAKC,YAAYb,GACjB,IAAMc,EAAId,EACV,EAAKH,aAAakB,KAAKC,YAAW,kBAAMlB,EAAWgB,EAAGT,EAAQI,SAAc,IAANT,IACtEA,GAAOW,GAJFC,EAAI,EAAGA,EAAIP,EAAQK,MAAOE,IAAM,OAQ7CL,QAAQC,IAAR,0BAGAP,KAAKJ,aAAakB,KAAKC,YAAW,kBAAMjB,MAAuB,IAANC,EAAa,OAjC9E,4BAoCUF,GACFG,KAAKgB,KAAKnB,GAEVG,KAAKJ,aAAaO,SAAQ,SAACc,GACvBC,aAAaD,MAGjBjB,KAAKJ,aAAe,OA3C5B,GDEA,WACI,aAAe,oBACXI,KAAKmB,SAAU,EAEfnB,KAAKC,SAAW,KAChBD,KAAKoB,KAAO,KACZpB,KAAKqB,WAAa,KAClBrB,KAAKsB,QAAU,IAPvB,wDAWQtB,KAAKC,SAAW,IAAKsB,OAAOC,cAAgBD,OAAOE,oBACnDzB,KAAKoB,KAAOpB,KAAKC,SAASyB,mBAC1B1B,KAAKqB,WAAarB,KAAKC,SAAS0B,aAEhC3B,KAAKoB,KAAKQ,KAAO,OACjB5B,KAAKoB,KAAKS,UAAUpC,MAAQO,KAAKsB,QACjCtB,KAAKqB,WAAWS,KAAKrC,MAAQ,EAE7BO,KAAKoB,KAAKW,QAAQ/B,KAAKqB,YACvBrB,KAAKqB,WAAWU,QAAQ/B,KAAKC,SAAS+B,aACtChC,KAAKoB,KAAKa,MAAM,KArBxB,4BAwBUpC,GACF,IAAMqC,EAAOlC,KAAKC,SAASC,YAC3BF,KAAKY,YAAYsB,GAEbrC,GACAA,EAAWqC,KA7BvB,kCAiCgBA,GAERlC,KAAKqB,WAAWS,KAAKK,sBAAsBD,GAC3ClC,KAAKqB,WAAWS,KAAKM,eAAe,EAAGF,GAGvClC,KAAKqB,WAAWS,KAAKO,wBAAwB,EAAGH,EAAO,MACvDlC,KAAKqB,WAAWS,KAAKO,wBAAwB,EAAGH,EAAO,KAAQ,OAxCvE,4BA2CUrC,GACEG,KAAKmB,SACLnB,KAAKgB,OAEThB,KAAKmB,SAAU,EACfnB,KAAKsC,cAhDb,2BAmDSzC,GACDG,KAAKoB,KAAKJ,OACVhB,KAAKmB,SAAU,EACfnB,KAAKC,SAAW,KAChBD,KAAKqB,WAAWS,KAAKrC,MAAQ,MAvDrC,M,eECqB8C,E,kDAKjB,WAAYC,GAAQ,IAAD,uBACf,cAAMA,IAHVC,aAAe,KAIX,IAAIC,EAAU,EAAKC,UAFJ,OAGf,EAAKhD,KAAO,EAAKiD,WAAWF,GAC5B,EAAKG,0BAA4B,EAAKA,0BAA0BC,KAA/B,gBACjC,EAAKC,yBAA2B,EAAKA,yBAAyBD,KAA9B,gBAChC,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKI,iBAAmB,EAAKA,iBAAiBJ,KAAtB,gBART,E,sDAYf,MAAO,CACH,CACItC,MAAO,GACP2C,SAAU,IAEd,CACI3C,MAAO,GACP2C,SAAU,IAEd,CACI3C,MAAO,GACP2C,SAAU,IAEd,CACI3C,MAAO,IACP2C,SAAU,IAEd,CACI3C,MAAO,IACP2C,SAAU,O,iCAKXxD,GAKP,OAJAA,EAAKyD,KAAI,SAAAC,GAEL,OADAA,EAAI,MAAYA,EAAK7C,MAAQ6C,EAAKF,SAC3BE,KAEJ1D,I,gDAGe2D,GACtBtD,KAAKuD,UAAY,IAAI7D,EAAmBM,KAAKL,MAC7CK,KAAKuD,UAAUtB,MAAMjC,KAAKgD,WAAYhD,KAAKkD,kBAC3ClD,KAAKwD,SAAS,M,+CAGOF,GACrBtD,KAAKuD,UAAUE,MAAMzD,KAAKiD,YAC1BjD,KAAKuD,UAAY,KACjBvD,KAAKwD,SAAS,M,iCAGPtB,EAAMO,GACbnC,QAAQC,IAAR,iBAAsB2B,IACtBlC,KAAKyC,aAAeA,EACpBzC,KAAKwD,SAAS,M,iCAGPtB,GACP5B,QAAQC,IAAR,uB,yCAIAP,KAAKuD,UAAY,KACjBvD,KAAKwD,SAAS,M,+BAId,IAAMrC,EAAUnB,KAAKuD,aAAevD,KAAKuD,UAAUpC,QAC7CsB,EAAetB,GAAWnB,KAAKyC,aAAezC,KAAKyC,aAAe,KAExE,OACI,yBAAKiB,UAAU,YACX,yBAAKA,UAAU,cAENvC,EASA,4BACGuC,UAAU,SACVC,QAAS3D,KAAK+C,0BAEd,0BAAMW,UAAU,WAAhB,SAZF,4BACEA,UAAU,WACVC,QAAS3D,KAAK6C,2BAEd,0BAAMa,UAAU,WAAhB,WAcZ,yBAAKA,UAAU,cAEPjB,EACE,6DAC4BzC,KAAKyC,aADjC,YAGA,+FAEE,kBAAC,IAAD,CAAMmB,GAAG,KAAT,kB,GA/GWC,IAAMC","file":"static/js/3.830d0443.chunk.js","sourcesContent":["import superPropBase from \"./superPropBase\";\nexport default function _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}","import getPrototypeOf from \"./getPrototypeOf\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}","/*\n * Base metronome, with no timing.\n * More like a \"click on command\" class.\n */\nexport class BaseMetronome {\n    constructor() {\n        this.playing = false;\n\n        this.audioCtx = null;\n        this.tick = null;\n        this.tickVolume = null;\n        this.soundHz = 1000;\n    }\n\n    initAudio() {\n        this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n        this.tick = this.audioCtx.createOscillator();\n        this.tickVolume = this.audioCtx.createGain();\n\n        this.tick.type = \"sine\";\n        this.tick.frequency.value = this.soundHz;\n        this.tickVolume.gain.value = 0;\n\n        this.tick.connect(this.tickVolume);\n        this.tickVolume.connect(this.audioCtx.destination);\n        this.tick.start(0); // No offset, start immediately.\n    }\n\n    click(callbackFn) {\n        const time = this.audioCtx.currentTime;\n        this.clickAtTime(time);\n\n        if (callbackFn) {\n            callbackFn(time);\n        }\n    }\n\n    clickAtTime(time) {\n        // Silence the click.\n        this.tickVolume.gain.cancelScheduledValues(time);\n        this.tickVolume.gain.setValueAtTime(0, time);\n\n        // Audible click sound.\n        this.tickVolume.gain.linearRampToValueAtTime(1, time + 0.001);\n        this.tickVolume.gain.linearRampToValueAtTime(0, time + 0.001 + 0.01);\n    }\n\n    start(callbackFn) {\n        if (this.playing) {\n            this.stop();\n        }\n        this.playing = true;\n        this.initAudio();\n    }\n\n    stop(callbackFn) {\n        this.tick.stop();\n        this.playing = false;\n        this.audioCtx = null;\n        this.tickVolume.gain.value = 0;\n    }\n}\n","import { BaseMetronome } from \"./baseMetronome\";\n\nexport class ScheduledMetronome extends BaseMetronome {\n    constructor(plan) {\n        super();\n        this.plan = plan;\n        this.tickTimeouts = [];\n    }\n\n    start(callbackFn, endCallbackFn) {\n        super.start();\n\n        let now = this.audioCtx.currentTime;\n\n        this.plan.forEach((segment, index) => {\n            console.log(\n                `scheduling for segment : ${index + 1}. With tempo : ${\n                segment.tempo\n                } and Ticks : ${segment.ticks}.`\n            );\n\n            const timeoutDuration = 60 / segment.tempo;\n\n            // Schedule all the clicks ahead.\n            for (let i = 0; i < segment.ticks; i++) {\n                this.clickAtTime(now);\n                const x = now;\n                this.tickTimeouts.push(setTimeout(() => callbackFn(x, segment.tempo), now * 1000));\n                now += timeoutDuration;\n            }\n        });\n\n        console.log(\n            `registering end event.`\n        );\n        this.tickTimeouts.push(setTimeout(() => endCallbackFn(), now * 1000 + 10));\n    }\n\n    stopM(callbackFn) {\n        this.stop(callbackFn);\n\n        this.tickTimeouts.forEach((timeOut)=> {\n            clearTimeout(timeOut);\n        });\n\n        this.tickTimeouts = [];\n    }\n}","import React from 'react';\nimport { ScheduledMetronome } from '../utils/scheduledMetronome';\nimport './metronome.css';\nimport { Link } from 'react-router-dom';\n\nexport default class Metronome extends React.Component {\n\n    metronome;\n    currentTempo = null;\n\n    constructor(props) {\n        super(props);\n        let rawPlan = this.getPlan();\n        this.plan = this.formatPlan(rawPlan);\n        this.handleMetronomeStartClick = this.handleMetronomeStartClick.bind(this);\n        this.handleMetronomeStopClick = this.handleMetronomeStopClick.bind(this);\n        this.handleTick = this.handleTick.bind(this);\n        this.handleStop = this.handleStop.bind(this);\n        this.handlePlanSeqEnd = this.handlePlanSeqEnd.bind(this);\n    }\n\n    getPlan() {\n        return [\n            {\n                tempo: 40,\n                duration: 0.1\n            },\n            {\n                tempo: 60,\n                duration: 0.1\n            },\n            {\n                tempo: 80,\n                duration: 0.1\n            },\n            {\n                tempo: 120,\n                duration: 0.2\n            },\n            {\n                tempo: 210,\n                duration: 0.2\n            },\n        ];\n    }\n\n    formatPlan(plan) {\n        plan.map(item => {\n            item[\"ticks\"] = item.tempo * item.duration;\n            return item;\n        });\n        return plan;\n    }\n\n    handleMetronomeStartClick(e){\n        this.metronome = new ScheduledMetronome(this.plan);\n        this.metronome.start(this.handleTick, this.handlePlanSeqEnd);\n        this.setState({});\n    }\n    \n    handleMetronomeStopClick(e){\n        this.metronome.stopM(this.handleStop);\n        this.metronome = null;\n        this.setState({});\n    }\n\n    handleTick(time, currentTempo) {\n        console.log(`tick @ ${time}`);\n        this.currentTempo = currentTempo;\n        this.setState({});\n    }\n    \n    handleStop(time) {\n        console.log(`Metronome Stopped`);\n    }\n    \n    handlePlanSeqEnd() {\n        this.metronome = null;\n        this.setState({});\n    }\n\n    render() {\n        const playing = this.metronome && !!this.metronome.playing;\n        const currentTempo = playing && this.currentTempo ? this.currentTempo : null;\n\n        return (\n            <div className=\"mWrapper\">\n                <div className=\"btnWrapper\">\n                    {\n                        !playing\n                        ? <button\n                            className=\"startBtn\"\n                            onClick={this.handleMetronomeStartClick}\n                        >\n                            <span className=\"btnText\">\n                                Start\n                            </span>\n                        </button>\n                        :<button\n                            className=\"endBtn\"\n                            onClick={this.handleMetronomeStopClick}\n                        >\n                            <span className=\"btnText\">\n                                Stop\n                            </span>\n                        </button>\n                    }\n                </div>\n                <div className=\"playingMsg\">\n                    {\n                        currentTempo\n                        ? <div>\n                            {`Currently playing @ : ${this.currentTempo} Bpm...`}\n                        </div>\n                        : <div>\n                            {`It'll play as per plan selected. If not created yet then go to `}\n                            <Link to=\"/\">plan...</Link>\n                        </div>\n                    }\n                </div>\n            </div>\n        )\n    }\n}"],"sourceRoot":""}